package effigy.wire.s2;

option java_package = "skadistats.clarity.wire.s2.proto";
option java_outer_classname = "S2NetMessages";

import "netmessages.proto";

option cc_generic_services = false;

enum SVC_Messages {
	svc_ServerInfo = 40;
	svc_FlattenedSerializer = 41;
	svc_ClassInfo = 42;
	svc_SetPause = 43;
	svc_CreateStringTable = 44;
	svc_UpdateStringTable = 45;
	svc_VoiceInit = 46;
	svc_VoiceData = 47;
	svc_Print = 48;
	svc_Sounds = 49;
	svc_SetView = 50;
	svc_ClearAllStringTables = 51;
	svc_CmdKeyValues = 52;
	svc_BSPDecal = 53;
	svc_SplitScreen = 54;
	svc_PacketEntities = 55;
	svc_Prefetch = 56;
	svc_Menu = 57;
	svc_GetCvarValue = 58;
	svc_StopSound = 59;
	svc_PeerList = 60;
	svc_PacketReliable = 61;
	svc_HLTVStatus = 62;
	svc_FullFrameSplit = 70;
}

message CSVCMsg_CreateStringTable {
	optional string name = 1;
	optional int32 num_entries = 2;
	optional bool user_data_fixed_size = 3;
	optional int32 user_data_size = 4;
	optional int32 user_data_size_bits = 5;
	optional int32 flags = 6;
	optional bytes string_data = 7;
	optional int32 uncompressed_size = 8;
	optional bool data_compressed = 9;
}

message CMsgVoiceAudio {
	optional VoiceDataFormat_t format = 1 [default = VOICEDATA_FORMAT_STEAM];
	optional bytes voice_data = 2;
	optional int32 sequence_bytes = 3;
	optional uint32 section_number = 4;
	optional uint32 sample_rate = 5;
	optional uint32 uncompressed_sample_offset = 6;
}

message CSVCMsg_VoiceData {
	optional CMsgVoiceAudio audio = 1;
	optional int32 client = 2;
	optional bool proximity = 3;
	optional fixed64 xuid = 4;
	optional int32 audible_mask = 5;
	optional uint32 tick = 6;
}

message CSVCMsg_ClearAllStringTables {
	optional string mapname = 1;
	optional uint32 map_crc = 2;
}

message ProtoFlattenedSerializerField_t {
	optional int32 var_type_sym = 1;
	optional int32 var_name_sym = 2;
	optional int32 bit_count = 3;
	optional float low_value = 4;
	optional float high_value = 5;
	optional int32 encode_flags = 6;
	optional int32 field_serializer_name_sym = 7;
	optional int32 field_serializer_version = 8;
	optional int32 send_node_sym = 9;
	optional int32 var_encoder_sym = 10;
}

message ProtoFlattenedSerializer_t {
	optional int32 serializer_name_sym = 1;
	optional int32 serializer_version = 2;
	repeated int32 fields_index = 3;
}

message CSVCMsg_FlattenedSerializer {
	repeated ProtoFlattenedSerializer_t serializers = 1;
	repeated string symbols = 2;
	repeated ProtoFlattenedSerializerField_t fields = 3;
}

message CMsgIPCAddress {
	optional fixed64 computer_guid = 1;
	optional uint32 process_id = 2;
}

message CMsgServerPeer {
	optional int32 player_slot = 1;
	optional fixed64 steamid = 2;
	optional CMsgIPCAddress ipc = 3;
	optional bool they_hear_you = 4;
	optional bool you_hear_them = 5;
	optional bool is_listenserver_host = 6;
}

message CSVCMsg_PeerList {
	repeated CMsgServerPeer peer = 1;
}

message CSVCMsg_HLTVStatus {
	optional string master = 1;
	optional int32 clients = 2;
	optional int32 slots = 3;
	optional int32 proxies = 4;
}