package effigy.wire.s1;

option java_package = "skadistats.clarity.wire.s1.proto";
option java_outer_classname = "S1NetMessages";

import "netmessages.proto";

option cc_generic_services = false;

enum SVC_Messages {
	svc_ServerInfo = 8;
	svc_SendTable = 9;
	svc_ClassInfo = 10;
	svc_SetPause = 11;
	svc_CreateStringTable = 12;
	svc_UpdateStringTable = 13;
	svc_VoiceInit = 14;
	svc_VoiceData = 15;
	svc_Print = 16;
	svc_Sounds = 17;
	svc_SetView = 18;
	svc_FixAngle = 19;
	svc_CrosshairAngle = 20;
	svc_BSPDecal = 21;
	svc_SplitScreen = 22;
	svc_UserMessage = 23;
	svc_EntityMessage = 24;
	svc_GameEvent = 25;
	svc_PacketEntities = 26;
	svc_TempEntities = 27;
	svc_Prefetch = 28;
	svc_Menu = 29;
	svc_GameEventList = 30;
	svc_GetCvarValue = 31;
	svc_PacketReliable = 32;
	svc_FullFrameSplit = 33;
}

message CSVCMsg_CreateStringTable {
	optional string name = 1;
	optional int32 max_entries = 2;
	optional int32 num_entries = 3;
	optional bool user_data_fixed_size = 4;
	optional int32 user_data_size = 5;
	optional int32 user_data_size_bits = 6;
	optional int32 flags = 7;
	optional bytes string_data = 8;
}

message CSVCMsg_SendTable {
	message sendprop_t {
		optional int32 type = 1;
		optional string var_name = 2;
		optional int32 flags = 3;
		optional int32 priority = 4;
		optional string dt_name = 5;
		optional int32 num_elements = 6;
		optional float low_value = 7;
		optional float high_value = 8;
		optional int32 num_bits = 9;
	}

	optional bool is_end = 1;
	optional string net_table_name = 2;
	optional bool needs_decoder = 3;
	repeated CSVCMsg_SendTable.sendprop_t props = 4;
}

message CSVCMsg_TempEntities {
	optional bool reliable = 1;
	optional int32 num_entries = 2;
	optional bytes entity_data = 3;
}

message CSVCMsg_VoiceData {
	optional int32 client = 1;
	optional bool proximity = 2;
	optional fixed64 xuid = 3;
	optional int32 audible_mask = 4;
	optional bytes voice_data = 5;
	optional VoiceDataFormat_t format = 6 [default = VOICEDATA_FORMAT_STEAM];
	optional int32 sequence_bytes = 7;
	optional uint32 section_number = 8;
	optional uint32 uncompressed_sample_offset = 9;
	optional uint32 tick = 10;
}
