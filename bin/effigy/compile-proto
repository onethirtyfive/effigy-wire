#!/usr/bin/env ruby

require 'fileutils'
require 'logger'

err_log = Logger.new(STDERR)

PROTO_ROOT =
  begin
    ENV.fetch('PROTO_ROOT')
  rescue KeyError
    File.join(Dir.pwd, 'proto')
  end

RUBY_OUT_ROOT =
  begin
    ENV.fetch('RUBY_OUT_ROOT')
  rescue KeyError
    File.join(Dir.pwd, 'lib', 'effigy', 'wire')
  end

EFFIGY_FORCE_COMPILE =
  begin
    !!ENV.fetch('EFFIGY_FORCE_COMPILE')
  rescue KeyError
    false
  end

unless EFFIGY_FORCE_COMPILE
  print "Have you cleaned, packaged, and tweak-proto'ed? [yN] > "
  answer = gets.strip

  unless answer == 'y'
    print 'OK, go take care of that.'
    exit(0)
  end
end

puts "> Ensuring output directory exists."
FileUtils.mkdir_p(RUBY_OUT_ROOT)

package_paths = []
proto_paths   = []

Dir.glob("#{PROTO_ROOT}/*").select do |path|
  if File.directory?(path)
    package_paths << path
  else
    proto_paths << path
  end
end

proto_paths.each do |proto_path|
  puts "> Compiling '#{File.basename(proto_path)}'"
  cmd = <<-EOV
    protoc \
      --proto_path=#{File.join(PROTO_ROOT)} \
      --ruby_out=#{RUBY_OUT_ROOT} \
      #{proto_path}
  EOV
  puts cmd
  system(cmd)
end

package_paths.each do |package_path|
  puts "> Package '#{File.basename(package_path)}'"

  Dir.glob(File.join(package_path, '*.proto')).each do |proto_path|
    puts "  > #{File.basename(proto_path)}"
    cmd = <<-EOV
      protoc \
        --proto_path=#{File.join(PROTO_ROOT)} \
        --proto_path=#{package_path} \
        --ruby_out=#{RUBY_OUT_ROOT} \
        #{proto_path}
    EOV
    puts cmd
    system(cmd)
  end
end

